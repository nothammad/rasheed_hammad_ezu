Hammad Rasheed
IS 439
Kevin Trainor
4/16//2025

As a part of this topic, we are exploring authentication and authorization for the EZU courseinfo Django project. We have explored different ways to enhance the Django admin to support user, group, and permission management more efficiently. For the topic of authorization and authentication, there are even more customizations that could be incorporated to make it easier for development. The first possible customization is showing group membership in the user list view. By default, the Django Admin does not show the groups that a user is assigned to, so incorporating this could make it much easier for developers to verify group membership for any amount of individuals. To do this, you would have to customize the UserAdmin class to display the group memberships directly in the list view. You would have to subclass the default UserAdmin, define a new function get_user_groups to return the group names, add this function to list_display and unregister the default UserAdmin and replace it with the customized one. This could be very useful for developers to determine permissions or accessibility of various different users efficiently. For the second customization, you could incorporate a last_login and is_active functionality for the Django Admin. This would be very helpful because it would allow you to know when users last logged in and if they are active or inactive. To do this, you would have to extend UserAdmin and add the last_login and is_active variables to the list_display. The variables would update on login and logout functions and they would be a great indicator for developers to use as a metric. Overall, we can customize the Django Admin much more to improve the development process and make specific actions much easier.